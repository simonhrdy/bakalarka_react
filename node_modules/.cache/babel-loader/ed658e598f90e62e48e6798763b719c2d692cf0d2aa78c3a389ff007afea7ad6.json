{"ast":null,"code":"import DirtyWords from \"../DirtyWords\";\nfunction validatePassword(password) {\n  const passwordRegex = /^(?=.*[A-Z])(?=.*[!@#$%^&*])(.{5,})$/;\n  return passwordRegex.test(password);\n}\nfunction matchPasswords(password, password_again) {\n  return password === password_again;\n}\nfunction containsDirtyWords(text) {\n  const words = text.split(/\\s+/);\n  return words.some(word => DirtyWords.includes(word.toLowerCase()));\n}\nexport { validatePassword, matchPasswords, containsDirtyWords };","map":{"version":3,"names":["DirtyWords","validatePassword","password","passwordRegex","test","matchPasswords","password_again","containsDirtyWords","text","words","split","some","word","includes","toLowerCase"],"sources":["/Users/simonhrdy/Desktop/bakalarka/web/src/Services/validator.js"],"sourcesContent":["import DirtyWords from \"../DirtyWords\";\n\nfunction validatePassword(password) {\n    const passwordRegex = /^(?=.*[A-Z])(?=.*[!@#$%^&*])(.{5,})$/;\n    return passwordRegex.test(password);\n}\n\nfunction matchPasswords(password, password_again){\n    return password === password_again;\n}\n\nfunction containsDirtyWords(text) {\n    const words = text.split(/\\s+/);\n    return words.some(word => DirtyWords.includes(word.toLowerCase()));\n}\n\n\nexport { validatePassword, matchPasswords, containsDirtyWords };"],"mappings":"AAAA,OAAOA,UAAU,MAAM,eAAe;AAEtC,SAASC,gBAAgBA,CAACC,QAAQ,EAAE;EAChC,MAAMC,aAAa,GAAG,sCAAsC;EAC5D,OAAOA,aAAa,CAACC,IAAI,CAACF,QAAQ,CAAC;AACvC;AAEA,SAASG,cAAcA,CAACH,QAAQ,EAAEI,cAAc,EAAC;EAC7C,OAAOJ,QAAQ,KAAKI,cAAc;AACtC;AAEA,SAASC,kBAAkBA,CAACC,IAAI,EAAE;EAC9B,MAAMC,KAAK,GAAGD,IAAI,CAACE,KAAK,CAAC,KAAK,CAAC;EAC/B,OAAOD,KAAK,CAACE,IAAI,CAACC,IAAI,IAAIZ,UAAU,CAACa,QAAQ,CAACD,IAAI,CAACE,WAAW,CAAC,CAAC,CAAC,CAAC;AACtE;AAGA,SAASb,gBAAgB,EAAEI,cAAc,EAAEE,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}